from abc import ABC, abstractmethod
import os.path

#from commmon.app import App
# from common.api import Api
# from commmon.database import Database
# from commmon.helpers import Helpers

class Insertor(ABC):
    """
    Insertor abstract class (insert_from_xxx)
    """

    @abstractmethod
    def read(self):
        pass

    @abstractmethod
    def preprocess(self):
        pass
    
    @abstractmethod
    def insert(self):
        pass

class InsertFromJsonl(Insertor):
    """
    Insert from .jsonl files. In this context, those files are generated by the twarc module.
    This class handles FLATTENED (1 tweet per line) jsonl files (see twarc documentation).
    """

    def __init__(self, app):
        self.app = app
        self.jsonl_path = os.path.join(self.app.root_dir, "database", "jsonl", "flat")


    def read(self, filename):
        """
        Open and extract each line with this generator.
        """

        with open(
            os.path.join(self.jsonl_path, filename), encoding="utf8",
        ) as open_f:
            for line in open_f:
                yield line

    def preprocess(self):
        pass

    def insert(self):
        pass
        


# TODO:
# add insert_from_file.py
# add insert_from_url.py